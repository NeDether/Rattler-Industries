#include "stdafx.h"
#include "DrillBuilding.h"
using namespace Simulator;
DrillBuilding::DrillBuilding(Vector3 pos) {
	position = pos;
	App::ConsolePrintF("SEEEEEEEEEX");


	auto model = simulator_new<Simulator::cInteractableObject>();
	object_cast<Simulator::cInteractableObject>(model)->SetModelKey({ id("EP1_sg_rare_fossils_04"), TypeIDs::prop, GroupIDs::CivicObjects });
}

DrillBuilding::DrillBuilding()
{
	pid = 0;
	modelPtr = nullptr;
	position = Vector3::ZERO;
}

DrillBuilding::~DrillBuilding() {



}

/// AUTOGENERATED METHODS ///

size_t DrillBuildingFactory::GetTypes(uint32_t* pDstTypes, size_t count) const {
	if (count >= 1) {
		pDstTypes[0] = DrillBuilding::NOUN_ID;
		return 1;
	}
	return 0;
}
Object* DrillBuildingFactory::Create(uint32_t type, ICoreAllocator* pAllocator) {
	return new DrillBuilding();
}
const char* DrillBuildingFactory::GetName(uint32_t type) const {
	return "DrillBuilding";
}


int DrillBuilding::AddRef() {
	return DefaultRefCounted::AddRef();
}
int DrillBuilding::Release() {
	return DefaultRefCounted::Release();
}

uint32_t DrillBuilding::GetCastID() const {
	return TYPE;
}
uint32_t DrillBuilding::GetNounID() const {
	return NOUN_ID;
}

void* DrillBuilding::Cast(uint32_t type) const {
	CLASS_CAST(DrillBuilding);
	PARENT_CAST(cGameData);
	return nullptr;
}

bool DrillBuilding::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool DrillBuilding::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}
bool DrillBuilding::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

void DrillBuilding::init(Vector3 pos, uint32_t PlanetID)
{
	position = pos;
	App::ConsolePrintF("SEEEEEEEEEX");
	
	pid = PlanetID;

	modelPtr = GameNounManager.CreateInstance(kRock);

	object_cast<cSpatialObject>(modelPtr)->SetModelKey({ id("ep1_ci_spice_pumpstation"), TypeIDs::prop, GroupIDs::CivicObjects });
	Vector3 direction = { 0, 0, 1 };
	Quaternion orientation = PlanetModel.GetOrientation(position, direction);
	object_cast<cSpatialObject>(modelPtr)->SetPosition(position);
	object_cast<cSpatialObject>(modelPtr)->SetOrientation(orientation);
	
	//auto model = simulator_new<Simulator::cInteractableObject>();
	
}

bool DrillBuilding::render()
{
	modelPtr.reset();
	modelPtr = GameNounManager.CreateInstance(kRock);

	object_cast<cSpatialObject>(modelPtr)->SetModelKey({ id("ep1_ci_spice_pumpstation"), TypeIDs::prop, GroupIDs::CivicObjects });
	Vector3 direction = { 0, 0, 1 };
	Quaternion orientation = PlanetModel.GetOrientation(position, direction);
	object_cast<cSpatialObject>(modelPtr)->SetPosition(position);
	object_cast<cSpatialObject>(modelPtr)->SetOrientation(orientation);
	return false;
}

uint32_t DrillBuilding::getPlanetID()
{
	return pid;
}

Vector3 DrillBuilding::getPosition()
{
	return position;
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute DrillBuilding::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};