#include "stdafx.h"
#include "SkondEmpire.h"

/// AUTOGENERATED METHODS ///
using namespace Simulator;
int SkondEmpire::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int SkondEmpire::Release() {
	return Simulator::cStrategy::Release();
}

const char* SkondEmpire::GetName() const {
	return "RattlerSpore::SkondEmpire";
}

bool SkondEmpire::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool SkondEmpire::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute SkondEmpire::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void SkondEmpire::Initialize() {

	sInstance = this;
	Skond = nullptr;
	Homeworld = nullptr;

	
}

void SkondEmpire::Dispose() {
	
}

void SkondEmpire::Update(int deltaTime, int deltaGameTime) {
	if (Homeworld == nullptr) {
		StarRequestFilter filter = StarRequestFilter();
		filter.AddStarType(StarType::StarG);
		filter.AddStarType(StarType::StarM);
		filter.AddStarType(StarType::StarO);
		filter.AddTechLevel(TechLevel::Creature);
		filter.maxDistance = 999999;
		filter.minDistance = 0;
		Homeworld = StarManager.FindClosestStar(Vector3(9999, 9999, 0), filter); //Does not crash
		App::ConsolePrintF("my fucking limit");
		Skond = StarManager.GetEmpireForStar(Homeworld.get()); 
		auto SkondSpecies = SpeciesManager.GetSpeciesProfile({ 0x23E33E31, TypeIDs::crt, GroupIDs::CreatureModels }); //Get Skond Models n shit
		Skond->SetSpeciesProfile(SkondSpecies); //set Set the species to the selectedSpecies
		//Skond->mArchetype = Archetypes::kArchetypePlayerKnight;
		Skond->mArchetype = Archetypes::kArchetypeGrob;
		
	}
	Skond->mEmpireName = u"Skond Hive";
	
}

bool SkondEmpire::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

SkondEmpire* SkondEmpire::Get()
{
	return sInstance;
}

uint32_t SkondEmpire::GetEmpireID()
{
	return Skond->GetEmpireID();
}
SkondEmpire* SkondEmpire::sInstance;