#include "stdafx.h"
#include "ScanMenu.h"
#include "ResourceIcon.h"

/// AUTOGENERATED METHODS ///

int ScanMenu::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int ScanMenu::Release() {
	return Simulator::cStrategy::Release();
}

const char* ScanMenu::GetName() const {
	return "RattlerSpore::ScanMenu";
}

bool ScanMenu::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool ScanMenu::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute ScanMenu::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void ScanMenu::Initialize() {
	counter = 0;
	close = false;
	mpUIlayout = nullptr;
	sInstance = this;
}

void ScanMenu::Dispose() {
	
}

void ScanMenu::Update(int deltaTime, int deltaGameTime) {
	if (Simulator::IsSpaceGame()) //If we're in the space stage... (adventures do not count)
	{


		if (mWindowOffset != 0 && mpUIlayout)
		{
			auto window = mpUIlayout->FindWindowByID(0xFFFFFFFF, false);
			float offset2 = (((mWindowOffset * -1) + 1) / 8);
			

			counter+=deltaTime;

			mWindowOffset = mWindowOffset + offset2;
			//CRAP FIXXED!!!!!! 

			UTFWin::IWindow* parentWindow = window->GetParent();
			Math::Rectangle rec = parentWindow->GetArea();
			//If closing, delete the UI
			if (counter >= 12 && close) {
			
				DeleteScan(true);
			}
		
		}
	}
	else
	{
		if (mpUIlayout)
		{
			CloseScan(false);
		}
	}
}

bool ScanMenu::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

bool ScanMenu::AddResources(vector<uint32_t> resources)
{
	auto resourcesWindow = mpUIlayout->FindWindowByID(id("cat"), true);
	if (resourcesWindow) {
		vector<UTFWin::IWindow*> shin;
		for (UTFWin::IWindow* child : resourcesWindow->children()) {

			if (child) {
				//resourcesWindow->RemoveWindow(child);
				shin.push_back(child);
			}
		}
		while (shin.size() != 0) {

			resourcesWindow->RemoveWindow(shin.back());
			shin.pop_back();

		}
	}

	int i = 0;


		for each (uint32_t zurg in resources)
		{
			//App::ConsolePrintF("%d", zurg);
			if (true)
			{
				UTFWin::UILayout* layout = new UTFWin::UILayout();
				layout->LoadByID(id("recipeslot"));
				layout->SetParentWindow(resourcesWindow);

				layout->SetVisible(true);

				if (auto itemWindow = layout->FindWindowByID(id("crapingslot")))
				{
					auto icon = itemWindow->FindWindowByID(id("icon"));
					ResourceKey imgKey;
					PropertyListPtr sillyPropList;
					if (PropManager.GetPropertyList(zurg, 0x034d97fa, sillyPropList))
					{
					
						if (App::Property::GetKey(sillyPropList.get(), 0x3068D95C, imgKey))
						{
				
							ImagePtr img;
							if (Image::GetImage(imgKey, img))
							{
						
								ImageDrawable* drawable = new ImageDrawable();
								drawable->SetImage(img.get());
								uint32_t rColor;

								if (App::Property::GetUInt32(sillyPropList.get(), 0x058CBB75, rColor)) {
								
									rColor = rColor + 4278190080;
									Color ColR = Color::Color(rColor);
									icon->SetShadeColor(ColR);
									//	LocalizedString westyorkshire;
									//	App::Property::GetText(sillyPropList.get(), 0x3068D95D, westyorkshire);
									//	itemWindow->FindWindowByID(0x03754e6c)->SetCaption(westyorkshire.GetText());
								}

								//	icon->SetShadeColor(Color::RED); Use later when setting recipe node colors.
								icon->SetDrawable(drawable);
							}
						}
					}


					itemWindow->SetFlag(UTFWin::WindowFlags::kWinFlagAlwaysInFront, true);
					itemWindow->FindWindowByID(id("zurgtastic"))->AddWinProc(new ResourceIcon(itemWindow, zurg, 0));
					itemWindow->SetLayoutLocation((60 * (i % 6)) + (8 * ((i % 6) + 1)), div((i), 6).quot * 80);

					mapUI.push_back(itemWindow);
				}
				i++;
			}

		}

	


	return false;
}

bool ScanMenu::OpenScan(bool sex)
{
	DeleteScan(true);
	if (!mpUIlayout)
	{
		mpUIlayout = new UTFWin::UILayout();
	}
	counter = 0;
	close = false;
	if (mpUIlayout->LoadByID(id("ScanMenu")))
	{
	
	
		mpUIlayout->SetParentWindow(WindowManager.GetMainWindow());
		auto window = mpUIlayout->FindWindowByID(0xFFFFFFFF, false);

		WindowManager.GetMainWindow()->SendToBack(mpUIlayout->GetContainerWindow());

		Math::Rectangle rec = window->GetParent()->GetArea();
		mpUIlayout->SetVisible(true);
		auto menuWindow = mpUIlayout->FindWindowByID(id("ScanMenu"));
		auto glider = mpUIlayout->FindWindowByID(0x0755F180);
		glider->SetVisible(true);
		layout.SetParentWindow(window);
		
		return true;
	}
	return false;
}
ScanMenu* ScanMenu::Get()
{
	return sInstance;
}

bool ScanMenu::CloseScan(bool sex) {
	if (mpUIlayout)
	{
		counter = 0;
		close = true;
		auto glider = mpUIlayout->FindWindowByID(0x0755F180);
		glider->SetVisible(false);
		return true;
	}
	return false;


}

bool ScanMenu::DeleteScan(bool sex)
{	//App::ConsolePrintF("mario");
	if (mpUIlayout)
	{
		counter = 0;
		close = false;
		mpUIlayout->SetVisible(false);
		//App::ConsolePrintF("le test");
		WindowManager.GetMainWindow()->RemoveWindow(mpUIlayout->FindWindowByID(0xFFFFFFFF, false));
		auto Delete(mpUIlayout);
		mpUIlayout = nullptr;
		return true;
	}
	//App::ConsolePrintF("brug");
	return false;

}
bool ScanMenu::getClosed()
{
	return close;
}
ScanMenu* ScanMenu::sInstance;