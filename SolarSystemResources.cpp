#include "stdafx.h"
#include "SolarSystemResources.h"

/// AUTOGENERATED METHODS ///

using namespace Simulator;

int SolarSystemResources::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int SolarSystemResources::Release() {
	return Simulator::cStrategy::Release();
}

const char* SolarSystemResources::GetName() const {
	return "RattlerSpore::SolarSystemResources";
}

bool SolarSystemResources::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool SolarSystemResources::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}
bool SolarSystemResources::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute SolarSystemResources::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void SolarSystemResources::Initialize() {
	sInstance = this;
	SystemIn = 0;
	sysLayout = nullptr;
	
}

void SolarSystemResources::Dispose() {
	
}

void SolarSystemResources::Update(int deltaTime, int deltaGameTime) {
	if (IsSpaceGame()) {
	
	
		if (sysLayout) {
			
		
		}
	
	}
}

bool SolarSystemResources::OpenSysUI()
{

	if (!sysLayout) {
		sysLayout = new UTFWin::UILayout();
	}

		
	if (sysLayout->LoadByID(id("SolarSystemResource"))) {
		
		sysLayout->SetVisible(true);
		sysLayout->SetParentWindow(WindowManager.GetMainWindow());
		WindowManager.GetMainWindow()->SendToBack(sysLayout->GetContainerWindow());
		auto window = sysLayout->FindWindowByID(0xFFFFFFFF, false);
		Math::Rectangle rec = window->GetParent()->GetArea();
		return true;
	}



	return false;
}

bool SolarSystemResources::CloseSysUI()
{
	auto Delete(sysLayout);
	sysLayout = nullptr;
	return false;
}

bool SolarSystemResources::LogSystem(const uint32_t StarID)
{
	auto system = simulator_new<SolarSystemResourceEntry>();
	system->init(StarID);
	return false;
}

bool SolarSystemResources::LogSystem()
{
	const StarID sid = GetActiveStarRecord()->GetID();
	uint32_t raw = sid.internalValue;
	auto system = simulator_new<SolarSystemResourceEntry>();
	system->init(raw);
	return false;
}

SolarSystemResources* SolarSystemResources::Get()
{
	return sInstance;
}

SolarSystemResources* SolarSystemResources::sInstance;