#include "stdafx.h"
#include "TriviteEmpire.h"

/// AUTOGENERATED METHODS ///
using namespace Simulator;
int TriviteEmpire::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int TriviteEmpire::Release() {
	return Simulator::cStrategy::Release();
}

const char* TriviteEmpire::GetName() const {
	return "RattlerSpore::TriviteEmpire";
}

bool TriviteEmpire::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool TriviteEmpire::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute TriviteEmpire::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void TriviteEmpire::Initialize() {

	sInstance = this;
	Trivite = nullptr;
	Homeworld = nullptr;


}

void TriviteEmpire::Dispose() {

}

void TriviteEmpire::Update(int deltaTime, int deltaGameTime) {
	if (Homeworld == nullptr) {
		StarRequestFilter filter = StarRequestFilter();
		filter.AddStarType(StarType::ProtoPlanetary);
		filter.maxDistance = 999999;
		filter.minDistance = 0;
		Homeworld = StarManager.FindClosestStar(Vector3(9999, 9999, 0), filter); //Does not crash
		App::ConsolePrintF("trivites loaded");
		Trivite = StarManager.GetEmpireForStar(Homeworld.get());
//		Trivite->SetSpeciesProfile(GetPlayerEmpire()->GetSpeciesProfile()); //set Set the species to the selectedSpecies
		Trivite->mArchetype = Archetypes::kArchetypePlayerKnight;
		Trivite->mEmpireName = u"Trivite Security Drone";
		Trivite->mCachedColor = ColorRGB(120, 120, 120);

	}
	

}

bool TriviteEmpire::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}

TriviteEmpire* TriviteEmpire::Get()
{
	return sInstance;
}

uint32_t TriviteEmpire::GetEmpireID()
{
	return Trivite->GetEmpireID();
}
TriviteEmpire* TriviteEmpire::sInstance;