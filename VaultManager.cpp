#include "stdafx.h"
#include "VaultManager.h"

/// AUTOGENERATED METHODS ///

int VaultManager::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int VaultManager::Release() {
	return Simulator::cStrategy::Release();
}

const char* VaultManager::GetName() const {
	return "RattlerSpore::VaultManager";
}

bool VaultManager::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool VaultManager::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}
bool VaultManager::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

using namespace Simulator;

Simulator::Attribute VaultManager::ATTRIBUTES[] = {
	SimAttribute(VaultManager,vaultplanets,1),
	SimAttribute(VaultManager,openedVaults,1),
	SimAttribute(VaultManager,cutsceneSeti,1),
	SimAttribute(VaultManager,cutsceneSysView,1),
	SimAttribute(VaultManager,cutscenePlanetView,1),

	// Add more attributes here
	// 
	//
	// This one must always be at the end

	Simulator::Attribute()
};

void VaultManager::Initialize() {
	App::ConsolePrintF("SKIBIDI");
	cutsceneSeti = false; //Did the first cutscene in a save file?
	cutsceneSysView = false; //Did the second cutscene in the solar system view?
	cutscenePlanetView = false; //Did the third cutscene on the planet surface?
	sInstance = this;
	LoadPlanet = false;
}

	
void VaultManager::Dispose() {
	
}

void VaultManager::Update(int deltaTime, int deltaGameTime) {

	if (GetCurrentGameMode() == GameModeIDs::kGameSpace) {
	
		if (GetCurrentContext() == SpaceContext::SolarSystem) {
			LoadPlanet = false;
			uint32_t pid = GetActivePlanetRecord()->GetID().internalValue;

				if (isVaultPlanet(pid)) {
					if (!cutsceneSysView) {
						cutsceneSysView = true;
						CinematicManager.PlayCinematic("RSPORE_VaultDetector", 0, 0, 0, 0, 0);
					}

				}
		}
		else if (GetCurrentContext() == SpaceContext::Planet) {
			if (!LoadPlanet) {
				uint32_t pid = GetActivePlanetRecord()->GetID().internalValue;
				if (isVaultPlanet(pid)) {




					//Summon the Eclipse Sentinel
					App::ConsolePrintF("Spawned A Ra'tal Drone.");
					cGameDataUFO* drone = CreateUFO(UfoType::SecurityDrone, nullptr);
					//drone->SetModelKey({ 0x2538FB35, TypeIDs::ufo, GroupIDs::UFOModels});
						drone->SetModelKey({ 0x25A8E66C, TypeIDs::ufo, GroupIDs::UFOModels });
						drone->SetTarget(GetPlayerUFO());
						drone->SetScale(5.0);
						drone->SetDesiredSpeed(0.2, 1);
						drone->mStandardSpeed = (0.3);
						drone->mMaxHealthPoints = 20000;
						drone->Heal(true);
						ToolManager.LoadTool(ResourceKey({ 0x1a8de7dd, 0, 0 }), drone->mpNPCFarAirWeapon);
						ToolManager.LoadTool(ResourceKey({ 0xfc22027a, 0, 0 }), drone->mpNPCMediumAirWeapon);

					ToolManager.LoadTool(ResourceKey({ 0x3a8ad016, 0, 0 }), drone->mpNPCNearAirWeapon);
					drone->SetPosition(Vector3(0, 1000, 0));
					drone->mZoomAltitude = 1000;


					//Play Vault intro cutscene when first land.
					if (!cutscenePlanetView) {
						cutscenePlanetView = true;
						CinematicManager.PlayCinematic("RSPORE_VAULTCUT", 0, 0, 0, 0, 0);
					}
				}
				LoadPlanet = true;

				}
			}
		else {
			LoadPlanet = false;
		}
	}
	
}



bool VaultManager::GenerateVault(cStarRecordPtr StrRecord)
{	//If black hole, or galactic object end.
	if ((int)StrRecord->GetType() <= 3) {
		App::ConsolePrintF("The system is a black hole.");
		return false;
	}
	if (GetCurrentContext() != SpaceContext::Galaxy) {
	
		return false;
	}
	if (StrRecord->GetTechLevel() == TechLevel::Creature) {
		int i = 0;
		bool generatedVault = false;
		//set to 10 normally
		int chmance = rand(12);
		if (chmance > 1) {
			return false;
		}
		//seriously replace with for each it keeps crashing
		while (!generatedVault || (i <= StrRecord->mPlanetCount-1)) {
			//replace with foreach
			if (StrRecord->GetPlanetRecord(i) == nullptr) {
				return false;
			}
			int rando = rand(14);
			App::ConsolePrintF("rand %d", rando);
			App::ConsolePrintF("rand 2 %d", rando);
			int pType = (int)StrRecord->GetPlanetRecord(i)->mType;
			
			//If T0 T1 T2 or T3 then generate vault, otherwise if gas giant or asteroid belt, skip.
			if(pType >= 2 && pType <= 5) {
				//If statement was here that checked the boolean, however it resulted in returning a nullptr and crashes the game.
				
				if (!VaultManagerA.cutsceneSeti) {
					CinematicManager.PlayCinematic("RSPORE_VAULTSETIWAIT", 0, 0, 0, 0, 0);
					VaultManagerA.cutsceneSeti = true;
				}

				


				auto vaultplanet = StrRecord->GetPlanetRecord(i)->GetID();
				//replace with hash_map
				ResourceKey vpkey;
				vpkey.instanceID = vaultplanet.internalValue;
				vaultplanets.emplace(vpkey,vaultplanet.internalValue);
				ResourceKey vaultScript;
				//rattlesnake //prop //planetTerrainScripts_artDirected~
				//vaultScript = ResourceKey(0x98eeb4f9, 0x00B1B104, 0x4184a200);
				//vaultTEST //prop //planetTerrainScriptsRSPORE
				vaultScript = ResourceKey(0xa395f2a9, 0x00B1B104, 0x8C2C3803);
				
				
				StrRecord->GetPlanetRecord(i)->GenerateTerrainKey();
				StrRecord->GetPlanetRecord(i)->SetGeneratedTerrainKey(vaultScript);
				StrRecord->GetPlanetRecord(i)->mCommodityNodes.clear();
				//StrRecord->GetPlanetRecord(i)->mFlags = 17480;
				//StrRecord->GetPlanetRecord(i)->mType = PlanetType::T1;

				//StrRecord->GetPlanetRecord(i)->mSpiceGen = ResourceKey({ id(""),0,0 });

				App::ConsolePrintF("A vault has generated on planet %d", i);
				return true;
				
			}
			i++;
		
		}
	}
	App::ConsolePrintF("The system has the incorrect tech level.");
	return false;
}

bool VaultManager::OpenVault(cPlanetRecordPtr PlRecord)
{
	auto vaultplanet = PlRecord->GetID();
	//replace with hash_map
	ResourceKey vpkey;
	vpkey.instanceID = vaultplanet.internalValue;
	vaultplanets.emplace(vpkey, vaultplanet.internalValue);
	return false;
}

void VaultManager::GiveRandBadge()
{
	BadgeManager.AddToBadgeProgress(BadgeManagerEvent(0x97d26d2b), 10);

}

VaultManager* VaultManager::Get()
{
	return sInstance;
}
bool VaultManager::isVaultPlanet(uint32_t PlanetID)
{	//Get rid of the simulator system, a regular vector would be more optimized.
	
	//		SavedBuildings.clear();

	if (vaultplanets.find(ResourceKey().WithInstance(PlanetID)) != vaultplanets.end()) {

		return true;


	}
	return false;
}

bool VaultManager::isGrobPlanet(uint32_t pID)
{
	if (PlanetID(pID).GetRecord()->GetStarRecord()->mEmpireID == StarManager.GetGrobEmpireID() && PlanetID(pID).GetRecord()->GetTechLevel() == TechLevel::Empire) {
		return true;
	}
	return false;
}

bool VaultManager::isSkondPlanet(uint32_t pID)
{
	if (PlanetID(pID).GetRecord()->GetTechLevel() == TechLevel::City) {
		return true;
	}
	return false;
}

VaultManager* VaultManager::sInstance;