#include "stdafx.h"
#include "VaultManager.h"

/// AUTOGENERATED METHODS ///

int VaultManager::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int VaultManager::Release() {
	return Simulator::cStrategy::Release();
}

const char* VaultManager::GetName() const {
	return "RattlerSpore::VaultManager";
}

bool VaultManager::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool VaultManager::WriteToXML(Simulator::XmlSerializer* writexml)
{
	return false;
}
bool VaultManager::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

using namespace Simulator;

Simulator::Attribute VaultManager::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void VaultManager::Initialize() {
	cutsceneSeti = false;
	sInstance = nullptr;
}

	
void VaultManager::Dispose() {
	
}

void VaultManager::Update(int deltaTime, int deltaGameTime) {
	
}



bool VaultManager::GenerateVault(cStarRecordPtr StrRecord)
{	//If black hole, or galactic object end.
	if ((int)StrRecord->GetType() <= 3) {
		App::ConsolePrintF("The system is a black hole.");
		return false;
	}
	if (StrRecord->GetTechLevel() == TechLevel::Creature) {
		int i = 0;
		bool generatedVault = false;
		while (!generatedVault || (i <= StrRecord->mPlanetCount)) {
			//If T0 T1 T2 or T3 then generate vault, otherwise if gas giant or asteroid belt, skip.
			if((int)StrRecord->GetPlanetRecord(i)->mType <= 2) {
				
				CinematicManager.PlayCinematic("RSPORE_VAULTSETIWAIT", 0, 0, 0, 0, 0);
					
				auto vaultplanet = simulator_new<VaultPlanet>();
				vaultplanet->init(StrRecord->GetPlanetRecord(i)->GetID().internalValue);
				App::ConsolePrintF("A vault has generated on planet %d", i);
				return true;
				
			}
			i++;
		
		}
	}
	App::ConsolePrintF("The system has the incorrect tech level.");
	return false;
}

VaultManager* VaultManager::Get()
{
	return sInstance;
}
bool VaultManager::isVaultPlanet(uint32_t PlanetID)
{	//Get rid of the simulator system, a regular vector would be more optimized.
	auto vaults = GetData<VaultPlanet>();
	//		SavedBuildings.clear();
	for (auto vault : vaults) {
		if (vault->GetPlanetID() == PlanetID) {

			return true;



		}
	}
	return false;
}

VaultManager* VaultManager::sInstance;